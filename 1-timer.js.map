{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["\nimport flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst btn = document.querySelector('[data-start]');\nconst input = document.querySelector('#datetime-picker');\nconst time = document.querySelectorAll('.value');\n\nlet userSelectedDate;\nbtn.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n      userSelectedDate = selectedDates[0];\n      const now = new Date();\n      if (userSelectedDate <= now) {\n          massageError();\n          btn.disabled = true;\n          return;\n      }\n      btn.disabled = false;\n  },\n};\nfunction massageError() {\n    iziToast.error({\n        title: 'Error',\n        titleColor: 'white',\n        message: 'Please choose a date in the future',\n        messageColor: 'white',\n        backgroundColor: 'red',\n        position: 'topRight'\n});\n}\n\nbtn.addEventListener('click', startTimer);\n\nfunction startTimer() {\n  const intervalId = setInterval(() => {\n      const now = new Date();\n      const timer = userSelectedDate - now;\n      if (timer <= 0) {\n          clearInterval(intervalId); \n          btn.disabled = false;\n          input.disabled = false;\n          return;\n      }\n      const convertTime = convertMs(timer);\n      updateSpan(convertTime);\n      btn.disabled = true;\n      input.disabled = true;\n      \n    }, 1000);\n}\n\nfunction updateSpan(timer) {\n    timer.forEach((elements, index) => {\n        time[index].textContent = addLeadingZero(elements);\n    });\n}\n\nfunction addLeadingZero(value) {\n    return String(value).padStart(2, '0');\n}\n\nflatpickr('#datetime-picker', options);\n\n\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return [ days, hours, minutes, seconds ];\n}\n\n"],"names":["btn","input","time","userSelectedDate","options","selectedDates","massageError","iziToast","startTimer","intervalId","timer","convertTime","convertMs","updateSpan","elements","index","addLeadingZero","value","flatpickr","ms","days","hours","minutes","seconds"],"mappings":"2GAMA,MAAMA,EAAM,SAAS,cAAc,cAAc,EAC3CC,EAAQ,SAAS,cAAc,kBAAkB,EACjDC,EAAO,SAAS,iBAAiB,QAAQ,EAE/C,IAAIC,EACJH,EAAI,SAAW,GAEf,MAAMI,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAGnB,GAFAF,EAAmBE,EAAc,CAAC,EAE9BF,GADQ,IAAI,KACa,CACzBG,IACAN,EAAI,SAAW,GACf,MACH,CACDA,EAAI,SAAW,EAClB,CACH,EACA,SAASM,GAAe,CACpBC,EAAS,MAAM,CACX,MAAO,QACP,WAAY,QACZ,QAAS,qCACT,aAAc,QACd,gBAAiB,MACjB,SAAU,UAClB,CAAC,CACD,CAEAP,EAAI,iBAAiB,QAASQ,CAAU,EAExC,SAASA,GAAa,CACpB,MAAMC,EAAa,YAAY,IAAM,CAEjC,MAAMC,EAAQP,EADF,IAAI,KAEhB,GAAIO,GAAS,EAAG,CACZ,cAAcD,CAAU,EACxBT,EAAI,SAAW,GACfC,EAAM,SAAW,GACjB,MACH,CACD,MAAMU,EAAcC,EAAUF,CAAK,EACnCG,EAAWF,CAAW,EACtBX,EAAI,SAAW,GACfC,EAAM,SAAW,EAElB,EAAE,GAAI,CACX,CAEA,SAASY,EAAWH,EAAO,CACvBA,EAAM,QAAQ,CAACI,EAAUC,IAAU,CAC/Bb,EAAKa,CAAK,EAAE,YAAcC,EAAeF,CAAQ,CACzD,CAAK,CACL,CAEA,SAASE,EAAeC,EAAO,CAC3B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACxC,CAEAC,EAAU,mBAAoBd,CAAO,EAIrC,SAASQ,EAAUO,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAEC,EAAMC,EAAOC,EAASC,CAAO,CACxC"}